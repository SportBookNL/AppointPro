// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Organization {
  id                    String         @id @default(cuid())
  name                  String
  subdomain             String?        @unique
  branche               String
  description           String
  locations             Location[]
  updatedAt             DateTime       @updatedAt
  createdAt             DateTime       @default(now())
  User                  User[]
  // Subscription fields
  stripeCustomerId      String?        @unique
  hasActiveSubscription Boolean        @default(false)
  subscriptions         Subscription[]
}

// Subscription model
model Subscription {
  id                   String       @id @default(cuid())
  organizationId       String
  organization         Organization @relation(fields: [organizationId], references: [id])
  stripeSubscriptionId String       @unique
  status               String // 'active', 'canceled', 'past_due', etc.
  priceId              String
  planName             String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean      @default(false)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

// Model for storing subscription products/plans
model SubscriptionPlan {
  id            String   @id @default(cuid())
  stripePriceId String   @unique
  name          String
  description   String
  price         Float
  interval      String // 'month', 'year'
  active        Boolean  @default(true)
  features      String // JSON string of features
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Location {
  id             String       @id @default(cuid())
  name           String
  address        String
  postalCode     String?
  country        String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  facilities     Facility[]
  bookings       Booking[]
  updatedAt      DateTime     @updatedAt
  createdAt      DateTime     @default(now())
}

model Facility {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  locationId  String
  location    Location  @relation(fields: [locationId], references: [id])
  bookings    Booking[]
  features    Feature[]
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
}

model Feature {
  id         String     @id @default(cuid())
  name       String // Naam van het kenmerk (bijv. "Tennis", "Indoor")
  category   String // Categorie van het kenmerk (sport, surface, indoor, amenities)
  facilities Facility[] // Faciliteiten die dit kenmerk hebben
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Booking {
  id            String         @id @default(cuid())
  startTime     DateTime
  endTime       DateTime
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  facilityId    String
  facility      Facility       @relation(fields: [facilityId], references: [id])
  locationId    String
  location      Location       @relation(fields: [locationId], references: [id])
  status        String         @default("PENDING") // PENDING, CONFIRMED, CANCELLED
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

//REGION USER AUTHENTICATION and AUTHORIZATION

model User {
  id                          String          @id @default(cuid())
  name                        String?
  email                       String?         @unique
  password                    String?
  emailVerified               DateTime?
  image                       String?
  role                        String?         @default("CLIENT")
  accounts                    Account[]
  sessions                    Session[]
  authenticators              Authenticator[]
  bookings                    Booking[]
  notifications               Notification[]
  // Password reset fields
  resetToken                  String?
  resetTokenExpires           DateTime?
  // Subscription-related fields
  lastActiveSubscriptionCheck DateTime?
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
  organizationId              String?
  organization                Organization?   @relation(fields: [organizationId], references: [id])
  // Refresh tokens
  refreshTokens               RefreshToken[]
  // Two-factor authentication
  twoFactorAuth               TwoFactorAuth?
  backupCodes                 BackupCode[]
}

// Model for storing refresh tokens
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String // "BOOKING_CONFIRMATION", "BOOKING_REMINDER", "BOOKING_CANCELLATION", etc.
  title     String
  content   String
  isRead    Boolean   @default(false)
  sentAt    DateTime  @default(now())
  readAt    DateTime?
  bookingId String?
  booking   Booking?  @relation(fields: [bookingId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Two-Factor Authentication
model TwoFactorAuth {
  id        String   @id @default(cuid())
  userId    String   @unique
  secret    String
  verified  Boolean  @default(false)
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Backup codes for 2FA recovery
model BackupCode {
  id        String   @id @default(cuid())
  userId    String
  code      String
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([code])
}
