name: Build and Test

on:
  pull_request:
    branches: ['main']
  push:
    branches: ['**']

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      NEXTAUTH_URL: http://localhost:3000
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Check if any required environment variables are empty
      - name: Check Environment Variables
        run: |
          missing_vars=()
          
          [ -z "$DATABASE_URL" ] && missing_vars+=("DATABASE_URL")
          [ -z "$NEXTAUTH_SECRET" ] && missing_vars+=("NEXTAUTH_SECRET")
          [ -z "$STRIPE_SECRET_KEY" ] && missing_vars+=("STRIPE_SECRET_KEY")
          [ -z "$STRIPE_WEBHOOK_SECRET" ] && missing_vars+=("STRIPE_WEBHOOK_SECRET")
          [ -z "$NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY" ] && missing_vars+=("NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY")
          
          if [ ${#missing_vars[@]} -ne 0 ]; then
            echo "⚠️ WARNING: The following environment variables are empty or not set:"
            for var in "${missing_vars[@]}"; do
              echo "  - $var"
            done
            echo "This may cause issues with your application functionality."
            # Don't fail the build, just warn
          else
            echo "✅ All required environment variables are set."
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'appoint_pro/package-lock.json'

      - name: Install Dependencies
        run: cd appoint_pro && npm ci

      - name: Run Linter
        run: cd appoint_pro && npm run lint

      - name: Generate Prisma Client
        run: cd appoint_pro && npx prisma generate

      # Set up the database with migrations only, skip seeding for now
      - name: Database Setup
        working-directory: appoint_pro
        run: |
          echo "🔄 Setting up database..."
          
          # First, check the current DATABASE_URL
          echo "Current DATABASE_URL: ${DATABASE_URL}"
          
          # For CI, let's create a local SQLite database instead of using remote DB
          export CI_DATABASE_URL="file:./test.db"
          echo "Using CI database: $CI_DATABASE_URL"
          
          # Create a modified schema.prisma for the CI environment
          cp prisma/schema.prisma prisma/schema.prisma.bak
          sed "s|url = env(\"DATABASE_URL\")|url = \"$CI_DATABASE_URL\"|g" prisma/schema.prisma.bak > prisma/schema.prisma
          
          # Apply migrations to the test database
          npx prisma migrate deploy
          
          # Verify the created database
          npx prisma db pull --print
          
          echo "✅ Database setup completed!"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # Create a simple bypass for authentication in tests
      - name: Setup Test Environment
        working-directory: appoint_pro
        run: |
          echo "🔧 Setting up test environment overrides..."
          # Create a .env.local file with test-specific settings
          cat << EOF > .env.local
          # Test environment settings
          SKIP_AUTH_IN_TESTS=true
          TEST_MODE=true
          EOF
          
          echo "✅ Test environment configured"

      # Build once and serve the built app for tests
      - name: Build Next.js App
        run: cd appoint_pro && npm run build -- --no-lint

      # Cache the .next directory for subsequent steps
      - name: Cache Next.js build output
        uses: actions/cache@v3
        with:
          path: appoint_pro/.next
          key: nextjs-build-${{ github.sha }}

      - name: Setup and Run Cypress E2E Tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: appoint_pro
          # No need to build again, reuse the previous build
          start: npm start
          wait-on: 'http://localhost:3000'
          browser: chrome
          headless: true 